const Request = require("../models/Request");
const PDFDocument = require("pdfkit");
const path = require("path");
const fs = require("fs");

// Create a new request (Student)
exports.createRequest = async (req, res) => {
  try {
    const { studentName, regNo, department, documentType, purpose } = req.body;
    const proofFile = req.file ? req.file.filename : null;

    const newRequest = await Request.create({
      studentName,
      regNo,
      department,
      documentType,
      purpose,
      proofFile
    });

    res.status(201).json({ message: "Request submitted", newRequest });
  } catch (err) {
    res.status(400).json({ message: err.message });
  }
};

// Get requests by status (Verifier/Admin)
exports.getRequestsByStatus = async (req, res) => {
  try {
    const { status } = req.params;
    const requests = await Request.find({ status });
    res.json(requests);
  } catch (err) {
    res.status(400).json({ message: err.message });
  }
};

// Verifier approves/rejects
exports.verifyRequest = async (req, res) => {
  try {
    const { id } = req.params;
    const { status, verifierComment } = req.body;

    const request = await Request.findById(id);
    if (!request) return res.status(404).json({ message: "Request not found" });

    request.status = status; // Reviewed / Rejected
    request.verifierComment = verifierComment;
    await request.save();

    res.json({ message: "Request updated", request });
  } catch (err) {
    res.status(400).json({ message: err.message });
  }
};

// Admin approves/rejects and generates PDF
exports.adminApprove = async (req, res) => {
  try {
    const { id } = req.params;
    const { status, adminComment } = req.body;

    const request = await Request.findById(id);
    if (!request) return res.status(404).json({ message: "Request not found" });

    request.status = status; // Approved / Rejected
    request.adminComment = adminComment;

    // If approved, generate PDF
if (status === "Approved") {
  const pdfPath = path.join(__dirname, "../uploads", `${request._id}.pdf`);
  const doc = new PDFDocument({ margin: 50 });

  doc.pipe(fs.createWriteStream(pdfPath));

  // --- HEADER ---
  doc.fontSize(24).fillColor("#2E86C1").text("SwiftDocs Certificate", { align: "center" });
  doc.moveDown(2);

  // --- STUDENT DETAILS ---
  doc.fontSize(14).fillColor("black").text(`This is to certify that:`, { align: "left" });
  doc.moveDown();

  doc.fontSize(16).text(`👤 Name: ${request.studentName}`);
  doc.text(`🎓 Registration No: ${request.regNo}`);
  doc.text(`🏛 Department: ${request.department}`);
  doc.text(`📄 Document Type: ${request.documentType}`);
  doc.text(`📝 Purpose: ${request.purpose}`);
  doc.moveDown();

  // --- STATUS & COMMENTS ---
  doc.fillColor("green").fontSize(16).text(`✅ Status: ${request.status}`);
  doc.fillColor("black").fontSize(14).text(`Verifier Comment: ${request.verifierComment || "N/A"}`);
  doc.text(`Admin Comment: ${request.adminComment || "N/A"}`);
  doc.moveDown(2);

  // --- FOOTER ---
  doc.fontSize(12).fillColor("gray").text("Generated by SwiftDocs", { align: "center" });
  doc.text(new Date().toLocaleString(), { align: "center" });

  doc.end();

  request.pdfFile = `${request._id}.pdf`;
}

    await request.save();
    res.json({ message: "Admin action completed", request });
  } catch (err) {
    res.status(400).json({ message: err.message });
  }
};

// Download PDF (Student)
exports.downloadPDF = async (req, res) => {
  try {
    const { id } = req.params;
    const request = await Request.findById(id);
    if (!request || !request.pdfFile)
      return res.status(404).json({ message: "PDF not found" });

    const filePath = path.join(__dirname, "../uploads", request.pdfFile);
    res.download(filePath);
  } catch (err) {
    res.status(400).json({ message: err.message });
  }
};
